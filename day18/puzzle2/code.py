import sys
sys.path.append('../')
sys.path.append('../../')

import re
import math
import pprint

from utils import *

instances = [
    {
        'input': '''\
5,4
4,2
4,5
3,0
2,1
6,3
2,4
1,5
0,6
3,3
2,6
5,1
1,2
5,5
2,5
6,5
1,4
0,4
6,4
1,1
6,1
1,0
0,5
1,6
2,0''',
    'max_x': 6,
    'max_y': 6,
    'first_n_bytes_to_fall': 12,
    'str_view_after_first_n_bytes_fall':'''\
...#...
..#..#.
....#..
...#..#
..#..#.
.#..#..
#.#....''',
    'shortest_path_length': 22,
    'first_coord_that_prevents_exit': (6,1),
    },    
    {
        'input': "../puzzle1/input.txt",
        'max_x': 70,
        'max_y': 70,
        'first_n_bytes_to_fall': 1024,
    },
]

attrs = [
    'str_view_after_first_n_bytes_fall',
    'shortest_path_length',
    'first_coord_that_prevents_exit',
    ]

def solve( instance ):

    empty_cell_char = '.'
    corrupted_cell_char = '#'

    empty_cell_int = -2
    corrupted_cell_int = -1

    max_x = instance['max_x']
    max_y = instance['max_y']
    first_n_bytes_to_fall = instance['first_n_bytes_to_fall']

    def parse_input( input ):
        strs = get_array_of_strings_from_input( input )
        coords = list(map(lambda xy: (int(xy[0]), int(xy[1])), list(map(lambda s: s.split(','), strs))))
        return coords

    coords = parse_input( instance['input'] )


    def construct_grid_after_first_n_bytes_fall( coords, first_n_bytes_to_fall ):
        int_yx_array = construct_int_yx_array ( max_x+1, max_y+1, empty_cell_int  )
        str_yx_array = construct_char_yx_array( max_x+1, max_y+1, empty_cell_char )

        for i in range(0, first_n_bytes_to_fall):
            (x,y) = coords[i]
            int_yx_array[y][x] = corrupted_cell_int

        for y in range(0, max_y+1):
            for x in range(0, max_x+1):
                if int_yx_array[y][x] == corrupted_cell_int:
                    str_yx_array[y][x] = corrupted_cell_char

        str_view = "\n".join( [ ''.join(row) for row in str_yx_array] )

        return int_yx_array, str_view

    int_yx_array, str_view_after_first_n_bytes_fall = construct_grid_after_first_n_bytes_fall(coords, first_n_bytes_to_fall)

    def naive_find_path( int_yx_array ):
        target_coord = (max_y, max_y)
        start_coord = (0,0)

        candidates = [ (start_coord, 0) ] # [ (coord, distance_so_far) ]
        known_coords = {} # [(coord)] = best_distance_so_far
        shortest_path_length = None

        while len(candidates)>0:
            candidate = candidates.pop(0)
            coord, distance_so_far = candidate
            x, y = coord

            if int_yx_array[y][x] == corrupted_cell_int:
                continue

            if coord in known_coords:
                continue

            # print( f"DEBUG: coord={coord}, distance_so_far={distance_so_far}")

            known_coords[coord] = distance_so_far

            for d in coord_delta_by_direction:
                dx, dy = coord_delta_by_direction[d]
                new_x = x + dx
                new_y = y + dy

                if new_x < 0 or new_y < 0 or new_x > max_x or new_y > max_y:
                    continue

                new_coord = (new_x, new_y)

                if new_coord in known_coords:
                    continue

                new_distance_so_far = distance_so_far+1

                if new_coord == target_coord:
                    shortest_path_length = new_distance_so_far
                    break

                candidates.append( (new_coord, new_distance_so_far))
            
            candidates.sort(key=lambda x: x[1]) # asc

        return shortest_path_length
    
    shortest_path_length = naive_find_path( int_yx_array )

    def find_first_blocking_coord( int_yx_array, coords ):
        first_coord_that_prevents_exit = None
        for i in range(first_n_bytes_to_fall, len(coords) ):
            next_corrupted_coord = coords[i]
            (x,y) = coords[i]
            int_yx_array[y][x] = corrupted_cell_int

            shortest_path_length = naive_find_path( int_yx_array )
            if shortest_path_length == None:
                first_coord_that_prevents_exit = coords[i]
                break
  
        assert first_coord_that_prevents_exit != None
        return first_coord_that_prevents_exit

    first_coord_that_prevents_exit = find_first_blocking_coord( int_yx_array, coords )

    return {
        'str_view_after_first_n_bytes_fall': str_view_after_first_n_bytes_fall,
        'shortest_path_length': shortest_path_length,
        'first_coord_that_prevents_exit': first_coord_that_prevents_exit,
        }

def run():
    print_here()
    verbose = True
    response = exercise_fn_with_cases( solve, instances, attrs, verbose )
    if verbose:
        pprint.pp( response )
    else:
        print( response )

if __name__ == "__main__":
    run()

# AOC 2024: 2024-12-31: day18/puzzle2/..
# [{'elapsed_time_s': 0.0003546250518411398},
#  {'str_view_after_first_n_bytes_fall': '...#.........#.........#.#.....#.........#.............................\n'
#                                        '.###.###.###.#.#######.#.#.#.#.#####.#####.#...........................\n'
#                                        '...#...#.#.....#.........#.#.#.......#.....#...........................\n'
#                                        '##.###.#.#######.#..######.#.#######.#.###.............................\n'
#                                        '...#.#.#.#...#.....#.......#.#.......#.#...#...........................\n'
#                                        '.#.#.#.#.#.#.#######.#######.#.#.#####.#...............................\n'
#                                        '.#...#.#...#.........#...#.#...#...#...................................\n'
#                                        '.###.#.###############.#.#.###.#####.#.................................\n'
#                                        '...#.#.......#.........#.....#...#...#...#.#.#.........................\n'
#                                        '.#.#.#######.#.########.##.##.##.#.#.#.###.#.#.........................\n'
#                                        '.#.#.#.......#.#.......#...#.....#.....#.#.#...........................\n'
#                                        '.#.##..#######.##..#.###.##..###.#######.#.#.#.........................\n'
#                                        '.#...#.#.#.......#.#...#...#.#...........#.#...........................\n'
#                                        '####.#.#.#..####..#.##.###.#.###########.#.##..........................\n'
#                                        '.....#.#...#.#...#...#...#.#.......#.#...#.............................\n'
#                                        '.#####.#.###.#.###.....##..#######...#.#####...........................\n'
#                                        '.......#.....#...#.#.....#.#.....#.#.......#...........................\n'
#                                        '.######.#####.##.#.#.###.#.#####...########.####.####..................\n'
#                                        '...#.........#...#.#.....#...#.....#.............#.....................\n'
#                                        '##.#...#####.#.###.####..###.#.#.#.#.#############.#...................\n'
#                                        '...#.#.#...#...#.#.....#...#.#...#...#.#.....#.....#...................\n'
#                                        '.#####.###.##.##.#.###..##.#.#..######.#.##..#.###.#...................\n'
#                                        '.......#.....#.......#...#.#.#.........#.......#...#...................\n'
#                                        '########..##.###.###.#.#.#.#.###.#####.###..#..#.......................\n'
#                                        '...#.......#.......#.#...#.#.#...#.....#.#.............................\n'
#                                        '.###...#.#......##.#.#...###.#.###.#####.##.......#....................\n'
#                                        '.....#.....#...............#.#.#...#...................................\n'
#                                        '..###..#..#..##...#.....##.#.#.#.#####.##..............................\n'
#                                        '.......#.#.......#.........#...#.#.....#...............................\n'
#                                        '.##.##.#...##..........###.#####.#.#.###..#............................\n'
#                                        '.........#...................#...#...#.................................\n'
#                                        '..#...#..#.....#.........#####.###.#......#............................\n'
#                                        '.......#.....................#...#...#.................................\n'
#                                        '.####................#.#.##..###.#..#..................................\n'
#                                        '...............................#.#.....................................\n'
#                                        '.#...........................#...#.#.##................................\n'
#                                        '.............................#.#...#.#.................................\n'
#                                        '.............................###.##.#.................#................\n'
#                                        '.................................#.....................................\n'
#                                        '.#.............................##...#.............................#....\n'
#                                        '.#.................................#.............................#.....\n'
#                                        '...............................####.......#........................#...\n'
#                                        '.....#.................................................................\n'
#                                        '................................###............................#.......\n'
#                                        '.................................#...................................#.\n'
#                                        '.................................#..#........................#.........\n'
#                                        '.................................#.....................................\n'
#                                        '................................#...........#............#.....#...#..#\n'
#                                        '...............................................#.......................\n'
#                                        '...........................................#####.....................#.\n'
#                                        '...........................................................#.#.......#.\n'
#                                        '.........................................########.........#..######..#.\n'
#                                        '.........................................#.....#.......................\n'
#                                        '................................##..######.###.#....##........#..#.##..\n'
#                                        '...................................#.#.....#...#.............#.#.......\n'
#                                        '.................................###.#.###.######....#.#...##...#.#####\n'
#                                        '.................................#.#.....#.#...#...........#.....#.....\n'
#                                        '.................................#.#.#####.#.#.#.###.#######.#.#.#.###.\n'
#                                        '.................................#...#...#.#.#.#.......#.....#.#...#...\n'
#                                        '..............................#..#.###.#.#.#.#.###...#.###.##..####..##\n'
#                                        '.................................#.#.#.#...#.#...#...#...#...#.#...#.#.\n'
#                                        '...............................###.#.#.##.##.#.####.####.###.#.#.#.#.#.\n'
#                                        '...............................#...#.#...#...#...........#...#.#.#.#...\n'
#                                        '...............................#.###.###.#.##.##############.#.#.#####.\n'
#                                        '...............................#.#.....#.#...#...#.........#.#.#.......\n'
#                                        '.............................#.#.#####.#.###.#.#.###.#.###.###.#.######\n'
#                                        '...............................#.#.....#...#.#.#...#.#...#.....#.#.....\n'
#                                        '..............................#..#.###.###.#.#..##.##.##..######.#.###.\n'
#                                        '...............................#.#.#.#.#.#...#.#...#.....#...#...#.#...\n'
#                                        '.............................#.#.#.#.#.#.#####.#.#.#.#####..##.#####.#.\n'
#                                        '...............................#...#...........#.....#...............#.',
#   'shortest_path_length': 416,
#   'first_coord_that_prevents_exit': (50, 23),
#   'elapsed_time_s': 20.003590541891754}]